[{"title":"","date":"2017-06-12T03:58:53.000Z","path":"2017/06/12/nvm install in MAC/","text":"nvm install in MAC open Terminal curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash open -e .bash_profile add export NVM_DIR=&quot;$HOME/.nvm&quot; [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; in profile file","tags":[]},{"title":"","date":"2017-05-31T07:40:35.000Z","path":"2017/05/31/title: gitHub-hexo-Next个人博客搭建记录/","text":"title: gitHub-hexo-Next个人博客搭建记录date: 2017-02-15 21:49:47tags: [随笔] h1h2h3h4h5","tags":[]},{"title":"语义化版本 2.0.1","date":"2017-05-14T02:49:35.000Z","path":"2017/05/14/语义化版本2.0/","text":"摘要版本格式：主版本号.次版本号.修订号，版本号递增规则如下：主版本号：当你做了不兼容的 API 修改，次版本号：当你做了向下兼容的功能性新增，修订号：当你做了向下兼容的问题修正。先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。 简介在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的套件越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。 在依赖高的系统中发布新版本套件可能很快会成为恶梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个相依套件改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本相依被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。 作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：XYZ （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。 我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。 语义化版本控制规范（SemVer）以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。） 使用语义化版本控制的软件“必须 MUST ”定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。 标准的版本号“必须 MUST ”采用 XYZ 的格式，其中 X、Y 和 Z 为非负的整数，且“禁止 MUST NOT”在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素“必须 MUST ”以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。 标记版本号的软件发行后，“禁止 MUST NOT ”改变该版本软件的内容。任何修改都“必须 MUST ”以新版本发行。 主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。 1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。 修订号 Z（x.y.Z | x &gt; 0）“必须 MUST ”在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。 次版本号 Y（x.Y.z | x &gt; 0）“必须 MUST ”在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也“必须 MUST ”递增。也“可以 MAY ”在内部程序有大量新功能或改进被加入时递增，其中“可以 MAY ”包括修订级别的改变。每当次版本号递增时，修订号“必须 MUST ”归零。 主版本号 X（X.y.z | X &gt; 0）“必须 MUST ”在有任何不兼容的修改被加入公共 API 时递增。其中“可以 MAY ”包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号“必须 MUST ”归零。 先行版本号“可以 MAY ”被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 码的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。数字型的标识符号“禁止 MUST NOT ”在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法达到兼容的需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。 版本编译信息“可以 MAY ”被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符号来修饰。标识符号“必须 MUST ”由 ASCII 的英数字和连接号 [0-9A-Za-z-] 组成，且“禁止 MUST NOT ”留白。当判断版本的优先层级时，版本编译信息“可 SHOULD ”被忽略。因此当两个版本只有在版本编译信息有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。 版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，“必须 MUST ”把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译信息不在这份比较的列表中）。由左到右依序比较每个标识符号，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须 MUST ”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定：只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符号比非数字的标识符号优先层级低。若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0- rc.1 &lt; 1.0.0。 为什么要使用语义化的版本控制？这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。 举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的套件。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定相依于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的套件管理系统，因为它们能与原有相依的软件兼容。 作为一位负责任的开发者，你理当确保每次套件升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级套件，而无需推出新的相依套件，节省你的时间及烦恼。 如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。 FAQ在 0.y.z 初始开发阶段，我该如何进行版本控制？ 最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。 如何判断发布 1.0.0 版本的时机？当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。 这不会阻碍快速开发和迭代吗？主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。 对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？ 这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。 为整个公共 API 写文件太费事了！ 为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。 万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。 如果我更新了自己的依赖但没有改变公共 API 该怎么办？ 由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的套件有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。 如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。 我该如何处理即将弃用的功能？弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。 语义化版本对于版本的字串长度是否有限制呢？没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。 关于 语义化版本控制的规范是由 Gravatars 创办者兼 GitHub 共同创办者 Tom Preston-Werner 所建立。 如果您有任何建议，请到 GitHub 上提出您的问题。 授权 创用 CC 姓名标示 3.0 Unported 授权条款 http://creativecommons.org/licenses/by/3.0/","tags":[]},{"title":"Angular2 核心概念","date":"2017-04-22T01:46:46.000Z","path":"2017/04/22/javascript/Angular2核心概念/","text":"整体上来说，Angular2变得更加简洁，最核心的概念只剩下一个，那就是组件Component，其它所有的一切都是围绕着Component展开的。 从这一点来看，Angular2无疑是受到了React的强力影响，毕竟React的核心概念也只有一个，也是Component。 所以，在使用ng2的时候，大家只要会写Component就行了，其它那些什么服务啊、路由啊、管道啊，都是些小工具而已。 接下来罗列一下Angular2与之前的1.x相比带来的核心改变。 第一点：Angular2删掉了$scope的概念。 在ng1.x里面，$scope是一个相当强大又相当可怕的东西，一言不合就让开发者自己$apply。ng2响应社区的强烈吐槽，删除（或者说隐藏）了$scope这个东西，开发者不再需要感知到它的存在，另外，由于ng2引入了zone.js，所以即使在各种回调函数中修改数据模型也不需要手动$apply()了。 这一点说明了群众们吐槽的力量还是相当强大的！ 第二点：删掉了ng-controller指令。 Controller终于和Component合体了，小僧想说的是，人家Backbone早就这么做了，你们一开始只顾着自己挖坑，也不看看友军的战法，还好浪子回头为时不晚。 第三点：大幅度演进了脏值检测机制。 大家都知道，”双向数据绑定“之所以能工作，都是因为底层有”脏值检测“这么一个神奇的东西。而实际上ng1.x里面的脏值检测机制的运行效率是非常差的，这就是为什么大家一直在吐槽绑定的对象不能太多、太深的原因。 那么，在ng2中，大幅度演进了这一机制，不仅引入了单向绑定，还引入了各种绑定策略，例如：只检测一次、利用JIT动态生成脏值检测代码等等。毫无疑问，有了这些工具之后，数据绑定效率不再是问题。 第四点：嵌套路由问题。 大家都知道，在ng1.x里面有一个非常讨厌的问题，官方的路由机制是不能嵌套的，这就导致大家在开发的过程中不得不依赖于第三方的ui-router库。ng2中没有这个问题了，因为ng2的路由是基于Component的，天然就支持嵌套。 第五点：依赖注入机制改造。 ng2里面的依赖注入简直和Java中的注解一毛一样，估计核心开发团队里面混入了Java大神。如果你熟悉Spring那一套注解的用法，那么写ng2的组件几乎没有学习成本。 第六点：框架整体上基于TypeScript开发。 这是最大的一个变更，但是大家不用害怕，因为你只要记住我一句话就再也没有顾虑了：TypeScript和ActionScript3一样，不过是变态版的Java而已。","tags":[{"name":"git","slug":"git","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/git/"}]},{"title":"何所谓favicon.ico","date":"2017-03-26T13:03:10.000Z","path":"2017/03/26/javascript/何所谓favicon.ico/","text":"所谓favicon，即Favorites Icon的缩写，顾名思义，便是其可以让浏览器的收藏夹中除显示相应的标题外，还以图标的方式区别不同的网站。当然，这不是Favicon的全部，根据浏览器的不同，Favicon显示也有所区别：在大多数主流浏览器如FireFox和Internet Explorer (5.5及以上版本)中，favicon不仅在收藏夹中显示，还会同时出现在地址栏上，这时用户可以拖曳favicon到桌面以建立到网站的快捷方式；除此之外，标签式浏览器甚至还有不少扩展的功能，如FireFox甚至支持动画格式的favicon等。 Quick Start1234567891011&lt;!DOCTYPE html&gt;&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;title&gt;home page&lt;/title&gt; &lt;link rel=\"icon\" href=\"Images/wangyi.ico\" type=\"image/x-icon\" /&gt; &lt;link rel=\"shortcut icon\" href=\"Images/wangyi.ico\" type=\"image/x-icon\" /&gt;&lt;/head&gt;&lt;body&gt; home page&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"构造函数的继承","date":"2017-03-23T01:46:46.000Z","path":"2017/03/23/javascript/构造函数的继承/","text":"Javascript面向对象编程（二）：构造函数的继承这个系列的第一部分，主要介绍了如何”封装”数据和方法，以及如何从原型对象生成实例。今天要介绍的是，对象之间的”继承”的五种方法。 比如，现在有一个”动物”对象的构造函数。123function Animal()&#123; this.species = &quot;动物&quot;; &#125; 还有一个”猫”对象的构造函数。1234function Cat(name,color)&#123; this.name = name; this.color = color; &#125; 怎样才能使”猫”继承”动物”呢？ 一、 构造函数绑定第一种方法也是最简单的方法，使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：1234567function Cat(name,color)&#123; Animal.apply(this,arguments); this.name=name; this.color=color;&#125;var cat1=new Cat(&quot;one&quot;,&quot;two&quot;);alert(cat1.species); 二、 prototype模式第二种方法更常见，使用prototype属性。如果”猫”的prototype对象，指向一个Animal的实例，那么所有”猫”的实例，就能继承Animal了。1234Cat.prototype=new Animal();Cat.prototype.constructor=Cat;var cat1=new Cat(&quot;one&quot;,&quot;two&quot;);alert(cat1.species); 代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。Cat.prototype = new Animal();它相当于完全删除了prototype 对象原先的值，然后赋予一个新值。但是，第二行又是什么意思呢？Cat.prototype.constructor = Cat;原来，任何一个prototype对象都有一个constructor属性，指向它的构造函数。如果没有”Cat.prototype = new Animal();”这一行，Cat.prototype.constructor是指向Cat的；加了这一行以后，Cat.prototype.constructor指向Animal。alert(Cat.prototype.constructor == Animal); //true更重要的是，每一个实例也有一个constructor属性，默认调用prototype对象的constructor属性。alert(cat1.constructor == Cat.prototype.constructor); // true因此，在运行”Cat.prototype = new Animal();”这一行之后，cat1.constructor也指向Animal！alert(cat1.constructor == Animal); // true这显然会导致继承链的紊乱（cat1明明是用构造函数Cat生成的），因此我们必须手动纠正，将Cat.prototype对象的constructor值改为Cat。这就是第二行的意思。这是很重要的一点，编程时务必要遵守。下文都遵循这一点，即如果替换了prototype对象，o.prototype = {};那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。o.prototype.constructor = o; 三、 直接继承prototype第三种方法是对第二种方法的改进。由于Animal对象中，不变的属性都可以直接写入Animal.prototype。所以，我们也可以让Cat()跳过 Animal()，直接继承Animal.prototype。 现在，我们先将Animal对象改写：12function Animal()&#123; &#125;Animal.prototype.species = &quot;动物&quot;; 然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。1234Cat.prototype=Animal.prototype;Cat.prototype.constructor=Cat;var cat1=new Cat(&quot;one&quot;,&quot;two&quot;);alert(cat1.species); 与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。所以，上面这一段代码其实是有问题的。请看第二行Cat.prototype.constructor = Cat;这一句实际上把Animal.prototype对象的constructor属性也改掉了！alert(Animal.prototype.constructor); // Cat 四、 利用空对象作为中介由于”直接继承prototype”存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。1234var F=function()&#123;&#125;;F.prototype=Animal.prototype;Cat.prototype=new F();Cat.prototype.constructor=Cat; F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。alert(Animal.prototype.constructor); // Animal我们将上面的方法，封装成一个函数，便于使用。123456function extend(Child,Parent)&#123; F.prototype=Parent.prototype; Child.prototype=new F(); Child.prototype.constructor=Child; Child.uber=Parent.prototype;&#125; 使用的时候，方法如下123extend(Cat,Animal);var cat1=new Cat(&quot;one&quot;,&quot;two&quot;);alert(cat1.species); 这个extend函数，就是YUI库如何实现继承的方法。另外，说明一点，函数体最后一行Child.uber = Parent.prototype;意思是为子对象设一个uber属性，这个属性直接指向父对象的prototype属性。（uber是一个德语词，意思是”向上”、”上一层”。）这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。 五、 拷贝继承上面是采用prototype对象，实现继承。我们也可以换一种思路，纯粹采用”拷贝”方法实现继承。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？这样我们就有了第五种方法。首先，还是把Animal的所有不变属性，都放到它的prototype对象上。123function Animal()&#123; Animal.prototype.species=&quot;animal&quot;;&#125; 然后，再写一个函数，实现属性拷贝的目的。12345678function extend2(Child,Parent)&#123; var p=Parent.prototype; var c=Child.prototype; for(var i in p)&#123; c[i]=p[i]; &#125; c.uber=p;&#125; 这个函数的作用，就是将父对象的prototype对象中的属性，一一拷贝给Child对象的prototype对象。使用的时候，这样写：1234extend2(Cat,Animal)&#123; var cat1=new Cat(&quot;one&quot;,&quot;two&quot;); alert(cat1.species);&#125;","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"javascript正则表达式","date":"2017-03-22T01:46:46.000Z","path":"2017/03/22/javascript/函数的继承/","text":"函数的继承这个系列的第一部分介绍了”封装”，第二部分介绍了使用构造函数实现”继承”。今天是最后一个部分，介绍不使用构造函数实现”继承”。 一、什么是”非构造函数”的继承？比如，现在有一个对象，叫做”中国人”。123var Chinese = &#123; nation:&apos;中国&apos; &#125;; 还有一个对象，叫做”医生”。123var Doctor =&#123; career:&apos;医生&apos; &#125; 请问怎样才能让”医生”去继承”中国人”，也就是说，我怎样才能生成一个”中国医生”的对象？这里要注意，这两个对象都是普通对象，不是构造函数，无法使用构造函数方法实现”继承”。 二、object()方法json格式的发明人Douglas Crockford，提出了一个object()函数，可以做到这一点。12345function object(o)&#123; function F()&#123;&#125; F.prototype=o; return new F();&#125; 这个object()函数，其实只做一件事，就是把子对象的prototype属性，指向父对象，从而使得子对象与父对象连在一起。使用的时候，第一步先在父对象的基础上，生成子对象：var Doctor=object(Chinese);然后，再加上子对象本身的属性：Doctor.career = &#39;医生&#39;;这时，子对象已经继承了父对象的属性了。alert(Doctor.nation); //中国 三、浅拷贝除了使用”prototype链”以外，还有另一种思路：把父对象的属性，全部拷贝给子对象，也能实现继承。下面这个函数，就是在做拷贝：12345678function extendCopy(p)&#123; var c=&#123;&#125;; for(var i in p)&#123; c[i]=p[i]; &#125; c.uber=p; return c;&#125; 使用的时候，这样写:123var Doctor = extendCopy(Chinese);Doctor.career = &apos;医生&apos;;alert(Doctor.nation); // 中国 但是，这样的拷贝有一个问题。那就是，如果父对象的属性等于数组或另一个对象，那么实际上，子对象获得的只是一个内存地址，而不是真正拷贝，因此存在父对象被篡改的可能。请看，现在给Chinese添加一个”出生地”属性，它的值是一个数组。Chinese.birthPlaces = [&#39;北京&#39;,&#39;上海&#39;,&#39;香港&#39;];通过extendCopy()函数，Doctor继承了Chinese。var Doctor=extendCopy(Chinese);然后，我们为Doctor的”出生地”添加一个城市：Doctor.birthPlaces.push(&#39;厦门&#39;);发生了什么事？Chinese的”出生地”也被改掉了！12alert(Doctor.birthPlaces); //北京, 上海, 香港, 厦门alert(Chinese.birthPlaces); //北京, 上海, 香港, 厦门 所以，extendCopy()只是拷贝基本类型的数据，我们把这种拷贝叫做”浅拷贝”。这是早期jQuery实现继承的方式。 四、深拷贝所谓”深拷贝”，就是能够实现真正意义上的数组和对象的拷贝。它的实现并不难，只要递归调用”浅拷贝”就行了。123456789101112function deepCopy(p,c)&#123; var c=c||&#123;&#125;; for(var i in p)&#123; if(typeof p[i]===&apos;object&apos;)&#123; c[i]=(p[i].constructor===Array)?[]:&#123;&#125;; deepCopy(p[i],c[i]); &#125;else&#123; c[i]=p[i]; &#125; &#125; return c;&#125; 使用的时候这样写：var Doctor = deepCopy(Chinese);现在，给父对象加一个属性，值为数组。然后，在子对象上修改这个属性：12Chinese.birthPlaces = [&apos;北京&apos;,&apos;上海&apos;,&apos;香港&apos;];Doctor.birthPlaces.push(&apos;厦门&apos;); 这时，父对象就不会受到影响了。12alert(Doctor.birthPlaces); //北京, 上海, 香港, 厦门alert(Chinese.birthPlaces); //北京, 上海, 香港","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"学习Javascript闭包（Closure）","date":"2017-02-22T07:13:29.000Z","path":"2017/02/22/javascript/学习Javascript闭包/","text":"闭包（closure）是Javascript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。下面就是我的学习笔记，对于Javascript初学者应该是很有用的。 一、变量的作用域要理解闭包，首先必须理解Javascript特殊的变量作用域。变量的作用域无非就是两种：全局变量和局部变量。Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量12345var n=999;function f1()&#123; alert(n);&#125;f1();//999 另一方面，在函数外部自然无法读取函数内的局部变量。1234function f1()&#123; var n=999;&#125;alert(n);//error 这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！12345function f1()&#123; n=999;&#125;f1();alert(n);//999 二、如何从外部读取局部变量？出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。那就是在函数的内部，再定义一个函数。123456function f1()&#123; var n=999; function f2()&#123; alert(n);//999 &#125;&#125; 在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！123456789function f1()&#123; var n=999; function f2()&#123; alert(n); &#125; return f2;&#125;var reult=f1();result();//999 三、闭包的概念上一节代码中的f2函数，就是闭包。各种专业文献上的”闭包”（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。 四、闭包的用途闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。怎么来理解这句话呢？请看下面的代码。123456789101112function f1()&#123; var n=999; nAdd=function()&#123;n+=1&#125; function f2()&#123; alert(n); &#125; return f2;&#125;var result=f1();result();//999nAdd();result();//1000 在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 五、使用闭包的注意点 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"javascript正则表达式","date":"2017-02-22T01:46:46.000Z","path":"2017/02/22/javascript/Javascript的正则表达式/","text":"正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。搜索模式可用于文本搜索和文本替换。 什么是正则表达式？正则表达式是由一个字符序列形成的搜索模式。当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。正则表达式可以是一个简单的字符，或一个更复杂的模式。正则表达式可用于所有文本搜索和文本替换的操作。 语法 /正则表达式主体/修饰符(可选) 其中修饰符是可选的var part=/paul/i== /paul/i== 是一个正则表达式。== paul== 是一个正则表达式主体 (用于检索)。== i== 是一个修饰符 (搜索不区分大小写)。 使用字符串方法在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。== search() 方法== 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。== replace() 方法== 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。 search() 方法使用正则表达式123使用正则表达式搜索“paul”字符串,且不区分大小写：var str = &quot;Visit Paul!&quot;;var n = str.search(/Paul/i); search() 方法使用字符串123search 方法可使用字符串作为参数。字符串参数会转换为正则表达式：var str = &quot;Visit Paul!&quot;;var n = str.search(&quot;Paul&quot;); replace() 方法使用正则表达式123 使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 Paul : var str = document.getElementById(&quot;demo&quot;).innerHTML; var txt = str.replace(/microsoft/i,&quot;Paul&quot;); replace() 方法使用字符串123replace() 方法将接收字符串作为参数：var str = document.getElementById(&quot;demo&quot;).innerHTML; var txt = str.replace(&quot;Microsoft&quot;,&quot;Paul&quot;); 使用 RegExp 对象在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。 使用 test()test() 方法是一个正则表达式方法。test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。以下实例用于搜索字符串中的字符 “e”：12var part = /e/;part.test(&quot;The best things in life are free!&quot;); 使用 exec()exec() 方法是一个正则表达式方法。exec() 方法用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。以下实例用于搜索字符串中的字母 “e”:/e/.exec(&quot;The best things in life are free!&quot;);","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"$scope.watch的用法","date":"2017-02-21T01:46:46.000Z","path":"2017/02/21/javascript/$scope.watch的用法/","text":"$watch简介在digest执行时，如果watch观察的的value与上一次执行时不一样时，就会被触发。AngularJS内部的watch实现了页面随model的及时更新。$watch方法在用的时候主要是手动的监听一个对象，但对象发生变化时触发某个事件。 watch方法用法$watch(watchFn,watchAction,deepWatch)watchFn:angular表达式或函数的字符串watchAction(newValue,oldValue,scope):watchFn发生变化会被调用deepWatch：可选的布尔值命令检查被监控的对象的每个属性是否发生变化$watch会返回一个函数，想要注销这个watch可以使用函数 例子在前面的例子中，当name的表单改变30次，然后触发某个事件。控制器代码如下：1234567891011var firstController = function ($scope)&#123; $scope.name='张三'; $scope.count=0; // 监听一个model 当一个model每次改变时 都会触发第2个函数 $scope.$watch('name',function(newValue,oldValue)&#123; ++$scope.count; if($scope.count &gt; 30)&#123; $scope.name = '已经大于30次了'; &#125; &#125;);&#125; html代码如下：123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div ng-app=\"\"&gt; &lt;div ng-controller=\"firstController\"&gt; &lt;input type=\"text\" value=\"\" ng-model=\"name\"/&gt; 改变次数:&#123;&#123;count&#125;&#125;-&#123;&#123;name&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\" src=\"app/index.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"../../vendor/angular/angularjs.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; watch的第三个参数12345678$scope.data = &#123; name :'李四', count:20 &#125; $scope.$watch('data',function()&#123; &#125;,true)","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"封装","date":"2017-02-21T01:46:46.000Z","path":"2017/02/21/javascript/封装/","text":"Javascript 面向对象编程（一）：封装Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。那么，如果我们要把”属性”（property）和”方法”（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？ 一、 生成实例对象的原始模式假定我们把猫看成一个对象，它有”名字”和”颜色”两个属性。1234var Cat=&#123; name:&apos;&apos;; color:&apos;&apos;; &#125; 现在，我们需要根据这个原型对象的规格（schema），生成两个实例对象。123var cat1=&#123;&#125;;cat1.name=&quot;one&quot;;cat1.color=&quot;two&quot;; 好了，这就是最简单的封装了，把两个属性封装在一个对象里面。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。 二、 原始模式的改进我们可以写一个函数，解决代码重复的问题。123456function Cat(name,color)&#123; return&#123; name:name, color:color &#125;&#125; 然后生成实例对象，就等于是在调用函数：12var cat1=Cat(&quot;one&quot;,&quot;two&quot;);var cat2=Cat(&quot;three&quot;,&quot;four&quot;); 这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。 三、 构造函数模式为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。所谓”构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。比如，猫的原型对象现在可以这样写，1234function Cat(name,color)&#123; this.name=name; this.color=color;&#125; 我们现在就可以生成实例对象了。12var cat1=new Cat(&quot;one&quot;,&quot;two&quot;);var cat2=new Cat(&quot;three&quot;,&quot;four&quot;); 这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。12alert(cat1.constructor == Cat); //truealert(cat2.constructor == Cat); //true Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。12alert(cat1 instanceof Cat); //truealert(cat2 instanceof Cat); //true 四、构造函数模式的问题构造函数方法很好用，但是存在一个浪费内存的问题。请看，我们现在为Cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象Cat就变成了下面这样：123456function Cat(name,color)&#123; this.name = name; this.color = color; this.type = &quot;猫科动物&quot;; this.eat = function()&#123;alert(&quot;吃老鼠&quot;);&#125;; &#125; 还是采用同样的方法，生成实例：1234var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;);var cat2 = new Cat (&quot;二毛&quot;,&quot;黑色&quot;);alert(cat1.type); // 猫科动物cat1.eat(); // 吃老鼠 表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。alert(cat1.eat == cat2.eat); //false能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。 五、 Prototype模式Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。123456function Cat(name,color)&#123; this.name=name; this.color=color;&#125;Cat.prototype.type=&quot;猫科动物&quot;;Cat.prototype.eat=function()&#123;alert(&apos;吃老鼠&apos;)&#125;; 然后，生成实例。1234var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;);var cat2 = new Cat(&quot;二毛&quot;,&quot;黑色&quot;);alert(cat1.type); // 猫科动物cat1.eat(); // 吃老鼠 这时所有实例的type属性和eat()方法，其实都是同一个内存地址，指向prototype对象，因此就提高了运行效率。alert(cat1.eat == cat2.eat); //true 六、 Prototype模式的验证方法为了配合prototype属性，Javascript定义了一些辅助方法，帮助我们使用它。 6.1 isPrototypeOf()这个方法用来判断，某个proptotype对象和某个实例之间的关系。12alert(Cat.prototype.isPrototypeOf(cat1)); //truealert(Cat.prototype.isPrototypeOf(cat2)); //true 6.2 hasOwnProperty()每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。12alert(cat1.hasOwnProperty(&quot;name&quot;)); // truealert(cat1.hasOwnProperty(&quot;type&quot;)); // false 6.3 in运算符in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。12alert(&quot;name&quot; in cat1); // truealert(&quot;type&quot; in cat1); // true in运算符还可以用来遍历某个对象的所有属性。for(var prop in cat1) { alert(&quot;cat1[&quot;+prop+&quot;]=&quot;+cat1[prop]); }","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"git 常用命令","date":"2016-12-22T01:46:46.000Z","path":"2016/12/22/git常用命令/","text":"如果指向克隆最新的版本git clone --depth=1 显示某次提交的内容git show $id 抛弃工作区修改git co --&lt;file&gt; 将工作文件修改到暂存区git add &lt;file&gt; 从版本库中删除文件git rm &lt;file&gt;从版本库中删除文件，但不删除文件git rm &lt;file&gt; --cached 提交你的修改git commit -m &#39;??&#39; 提交更新到远程服务器git push 从远程服务器，更新合并本地项目123456789101112 git fetch origin master git log -p master..origin/master git merge origin/master ``` 可以简化为此-----&gt; ```bash git fetch origin master:tmp git diff tmp git merge tmp 以上命令的含义： 首先从远程的origin的master主分支下载最新的版本到origin/master分支上 然后比较本地的master分支和origin/master分支的差别 最后进行合并 上述过程其实可以用以下更清晰的方式来进行：","tags":[{"name":"git","slug":"git","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/git/"}]},{"title":"Windows必备神器Cmder","date":"2016-11-08T01:46:46.000Z","path":"2016/11/08/win工具/Windows必备神器Cmder/","text":"Cmder is a software package created out of pure frustration over the absence of nice console emulators on Windows. It is based on amazing software, and spiced up with the Monokai color scheme and a custom prompt layout, looking sexy from the start. Quick Start 官方网站：cmder.net 打开Cmder官网，下拉页面找到Download项选择下载，下载的时候，有两个版本，分别是mini与full版；两个的差别在于有没有内建git-for-windows工具；我这里选择full版本点击下载。下载的是Cmder的压缩包, 可即压即用。 Use 把 Cmder 加到环境变量把Cmder.exe存放的目录添加到系统环境变量；加完之后,Win+r一下输入cmder,即可。 添加 cmder到右键菜单添加后在任意文件夹中即可打开Cmder，上一步的把 Cmder 加到环境变量就是为此服务的, 在管理员权限的终端输入以下语句即可:Cmder.exe /REGISTER ALL 为Cmder.exe创建快捷方式右击Cmder.exe选择“创建快捷方式”点击即可，以后打开Cmder.exe只要点击桌面对应的快捷方式即可 Cmder常用快捷键1234567891011121314151617利用Tab，自动路径补全；利用Ctrl+T建立新页签；利用Ctrl+W关闭页签;利用Ctrl+Tab切换页签;Alt+F4：关闭所有页签Alt+Shift+1：开启cmd.exeAlt+Shift+2：开启powershell.exeAlt+Shift+3：开启powershell.exe (系统管理员权限)Ctrl+1：快速切换到第1个页签Ctrl+n：快速切换到第n个页签( n值无上限)Alt + enter： 切换到全屏状态；Ctr+r 历史命令搜索2, 可在视窗内搜寻画面上出现过的任意关键字。3, 新增页签按钮。4, 切换页签按钮。5, 锁定视窗，让视窗无法再输入。6, 切换视窗是否提供卷轴功能，启动时可查询之前显示过的内容。7, 按下滑鼠左键可开启系统选单，滑鼠右键可开启工具选项视窗。 Win+Alt+P ：开启工具选项视窗","tags":[{"name":"win10","slug":"win10","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/win10/"}]},{"title":"angularjs的传值","date":"2016-10-22T01:46:46.000Z","path":"2016/10/22/javascript/angular的传值/","text":"区别如何在作用域之间通信呢？1.创建一个单例服务，然后通过这个服务处理所有子作用域的通信。2.通过作用域中的事件处理通信。但是这种方法有一些限制；例如，你并不能广泛的将事件传播到所有监控的作用域中。你必须选择是否与父级作用域或者子作用域通信。 $on、$emit和$broadcast使得event、data在controller之间的传递变的简单$emit：子传父 传递event与data$broadcast：父传子 child controller传递event与data$on：监听或接收数据、用于接收event与data。$broadcast、$emit事件必须依靠其他事件（ng-click等）进行触发，而不能单纯写一个这个$on倒是可以直接写，因为它属于监听和接收数据的 $on的方法中的event事件参数： event.name 事件名称 event.targetScope 发出或者传播原始事件的作用域 event.currentScope 目前正在处理的事件的作用域 event.stopPropagation() 一个防止事件进一步传播(冒泡/捕获)的函数(这只适用于使用$emit发出的事件) event.preventDefault() 这个方法实际上不会做什么事，但是会设置defaultPrevented为true。直到事件监听器的实现者采取行动之前它才会检查defaultPrevented的值。 event.defaultPrevented 如果调用了preventDefault则为true ####DEMO 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849 1 &lt;style&gt; 2 div&#123;border:1px solid #ff7300;padding:20px;margin:10px;border-radius: 5px;&#125; 3 &lt;/style&gt; 4 &lt;div ng-controller=\"ParentController\"&gt;&lt;!--父级--&gt; 5 &lt;div ng-click=\"clkP()\"&gt;click--给child&lt;/div&gt; 6 &lt;div ng-controller=\"OneSelfController\"&gt;&lt;!--自己--&gt; 7 &lt;span ng-click=\"clkme()\"&gt;click me&lt;/span&gt; 8 &lt;div ng-controller=\"ChildController\"&gt; 9 它是OneSelfController的子级10 &lt;/div&gt;&lt;!--子级--&gt;11 &lt;/div&gt;12 &lt;div ng-controller=\"siblingsController\"&gt;13 它与OneSelfController是平级14 &lt;/div&gt;&lt;!--平级--&gt;15 &lt;/div&gt;16 17 &lt;script&gt;18 var app=angular.module('firstApp',[]);//app模块名19 app.controller('OneSelfController',function($scope)&#123;20 $scope.clkme=function()&#123;21 $scope.$broadcast('sendChild','我给子控制器传递数据');22 $scope.$emit('sendParent','冒泡到父元素')23 &#125;24 &#125;).controller('ParentController',function($scope)&#123;25 $scope.$on('sendParent',function(event,data)&#123;//监听在子控制器中定义的 sendParent 事件26 console.log('OneSelfController传过来的',data,event.name,event);//事件名称：sendParent27 &#125;);28 $scope.clkP=function()&#123;29 $scope.$broadcast('sendAllChild','让siblingsController接收到');30 &#125;31 32 &#125;).controller('ChildController', function($scope)&#123;33 $scope.$on('sendChild', function(event,data) &#123;//监听在子控制器中定义的 sendChild 事件34 console.log('ChildCtrl', data,event.name,event);// 事件名称：sendChild35 &#125;);36 &#125;).controller('siblingsController', function($scope)&#123;37 $scope.$on('sendAllChild',function(event,data) &#123;38 console.log('值过来吧', data);39 &#125;);40 //下面事件不会触发41 $scope.$on('sendParent', function(event,data) &#123;42 console.log('平级得不到值', data);43 &#125;);44 $scope.$on('sendChild', function(event,data) &#123;45 console.log('平级得不到值', data);46 &#125;);47 &#125;);48 49 &lt;/script&gt;","tags":[{"name":"javascript、 angular1","slug":"javascript、-angular1","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript、-angular1/"}]},{"title":"webstorm nodejs ESLint 简单配置","date":"2016-09-22T01:46:46.000Z","path":"2016/09/22/javascript/webstorm nodejs ESLint 简单配置/","text":"ESLint 简介 官网 http://eslint.org/在团队协作中，为避免低级 Bug、产出风格统一的代码，会预先制定编码规范。使用 Lint 工具和代码风格检测工具，则可以辅助编码规范执行，有效控制代码质量。 在以前的项目中，我们选择 JSHint 和 JSCS 结合使用，WebStorm 等开发环境已经支持这些工具，使用起来很顺手。然而，最近使用 React JSX 语法时，却遇到了问题：JSHint 不支持 JSX 语法。虽然有 JSXHint 这样的 JSHint 衍生工具，但个人并不喜欢这样的实现方式：不是以插件的形式实现，而是重新重新包装了一个工具。Nicholas C. Zakas 也不喜欢，所以有了 ESLint。 原来选择 JSHint 的时候，也对比过 ESLint，基于 ESLint 在速度上比 JSHint 要慢一些，最终使用了 JSHint。现在需要 JSX 支持了，才发现 ESLint 的设计理念更符合实际需求。 ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。 ESLint 主要有以下特点： 默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移； 规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用； 包含代码风格检测的规则（可以丢掉 JSCS 了）； 支持插件扩展、自定义规则。 ESLint 已经宣布支持 JSX，不过目前为 alpha 版本，正式版发布之前可以先使用 eslint-plugin-react 替代。 More info: 更详细请移步 webstorm 的 nodejs ESLint 环境配置 首先安装ESLintnpm install eslint -g webstrom 要启用 eslint自动检测,需要 eslint全局安装配置一下 .eslintrc 文件 放在项目根目录 123456789101112131415&#123; \"extends\": \"eslint:recommended\", \"env\":&#123; \"node\":true, \"es6\":true &#125;, \"rules\": &#123; \"semi\": [\"error\", \"always\"], \"quotes\": \"off\", \"no-console\":\"off\", \"no-unused-vars\":\"off\", \"no-unreachable\":\"off\", \"no-redeclare\":\"warn\" &#125;&#125; 可选配置,让eslint忽略检测的文件 .eslintignore 配置规则与 .gitignore 一样 12345678910111213#井号是注释 根据自己的项目需要进行忽略# 如果 .eslintrc 开启了 env nodejs 那么 默认 node_modules是自动忽略的node_modules/node_modules/***.shgame-server/web-servergame-server/web-server/**toolstools/**testtest/**game-server/purchase-server/lib/seedrandom.jsgame-server/app/staticData/data/temp/*.js 打开webstorm选择File | Settings | Languages &amp; Frameworks | JavaScript | Code Quality Tools | ESLint 勾选 Enable . 至此,在 webstorm内, eslint已经可以工作了. webstorm可以自动提示 eslint指出的代码问题. 如需要手动检查所有代码的问题 ,可以打开 webstorm的 terminal, 输入 eslint . 如需要自动修复一些不规范的代码问题 ,例如 没有分号的问题,可以 输入 eslint . --fixhttp://eslint.org/docs/rules/ 带小扳手的规则都可以自动修复.","tags":[{"name":"javascript","slug":"javascript","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/javascript/"}]},{"title":"Tile Style","date":"2016-09-22T01:46:46.000Z","path":"2016/09/22/win工具/Tile Style/","text":"在Win10里对于低调乏味的磁贴、看到这款小工具之后对于美化来说是很有用处的。","tags":[{"name":"tags","slug":"tags","permalink":"https://github.com/mrpsweet/mrpsweet.github.io.git/tags/tags/"}]},{"title":"Hello World","date":"2016-05-30T07:27:20.000Z","path":"2016/05/30/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]